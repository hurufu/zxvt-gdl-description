(max_row 3)
(max_col 3)
(max_stack 1)
(start_position red (rc 1 1))
(rich_ui no_rich_ui)
(rich_ui last_roll)
(<= (rules ?Player (captured_by ?Player) (cons nothing (cons nothing (cons nothing (cons nothing (cons nothing (cons nothing nil))))))) (player ?Player))
(<= (rules ?Player wild (cons minusone (cons nothing (cons nothing (cons capture (cons capture (cons capture nil))))))) (player ?Player))
(<= (rules (situation (army (of ?P) (count ?X)) (on ?Tile (owned_by ?P))) (die ?D) (situation (army (of ?P) (count ?X)) (on ?Tile (owned_by ?P)))) (player ?P) (tile ?Tile) (d6 ?D) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count (succ ?X))) (on field wild)) (die 1) (situation (army (of ?P) (count ?X)) (on field wild))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field wild)) (die 2) (situation (army (of ?P) (count ?X)) (on field wild))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field wild)) (die 3) (situation (army (of ?P) (count ?X)) (on field wild))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field wild)) (die 4) (situation (army (of ?P) (count ?X)) (on field (owned_by ?P)))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field wild)) (die 5) (situation (army (of ?P) (count ?X)) (on field (owned_by ?P)))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field wild)) (die 6) (situation (army (of ?P) (count (succ ?X))) (on field wild))) (player ?P) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count (succ ?X))) (on field (owned_by ?Q))) (die 1) (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q))) (die 2) (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q))) (die 3) (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q))) (die 4) (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q))) (die 5) (situation (army (of ?P) (count ?X)) (on field (owned_by ?P)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(<= (rules (situation (army (of ?P) (count ?X)) (on field (owned_by ?Q))) (die 6) (situation (army (of ?P) (count ?X)) (on field (owned_by ?P)))) (player ?P) (player ?Q) (distinct ?P ?Q) (is_succ ?X))
(role random)
(role red)
(<= (input random (roll ?L)) (roll_d6 ?M ?L) (stack ?M))
(<= (input ?Player (move ?NumberOfPawns (from ?From) (to ?To))) (player ?Player) (stack ?NumberOfPawns) (neighboring_coordinates ?From ?To))
(<= (input ?Player (spawn (at ?StartPosition))) (start_position ?Player ?StartPosition))
(<= (base ?Cell) (valid_cell ?Cell))
(<= (base (control ?R)) (player ?R))
(<= (base (last_roll ?D6 ?Outcome)) (rich_ui last_roll) (d6 ?D6) (outcome ?Outcome))
(<= (init (cell ?StartPosition (captured_by ?Player) (with_pawn (of ?Player) (number 1)))) (start_position ?Player ?StartPosition))
(<= (init (cell ?Rc wild free)) (valid_cell (cell ?Rc wild free)) (start_position ?_1 ?StartPosition) (distinct ?StartPosition ?Rc))
(init (control red))
(<= (legal random (roll (cons ?D6 nil))) (true (control ?Player)) (player ?Player) (d6 ?D6))
(<= (legal ?Player (move ?MovingPawns (from ?From) (to ?To))) (true (control ?Player)) (true (cell ?From ?_2 (with_pawn (of ?Player) (number ?StationaryPawns)))) (player ?Player) (neighboring_coordinates ?From ?To) (stack ?MovingPawns) (le ?MovingPawns ?StationaryPawns))
(<= (legal ?Player (spawn (at (rc 1 1)))) (true (control ?Player)) (true_for_each_cell_occupation free))
(goal random 0)
(<= (goal ?Player ?Score) (player_score ?Player ?Score))
(<= terminal (player ?Player) (true_for_each_cell (captured_by ?Player)))
(<= (next (cell ?FromAndTo (captured_by ?Player) (with_pawn (of ?Player) (number ?MovingPawns)))) (does random (roll (cons ?D nil))) (does ?Player (move ?MovingPawns (from ?FromAndTo) (to ?FromAndTo))) (true (cell ?FromAndTo ?OldCapture (with_pawn (of ?Player) (number ?MovingPawns)))) (rule_outcome ?Player ?D ?OldCapture capture))
(<= (next (cell ?FromAndTo ?OldCapture (with_pawn (of ?Player) (number ?MovingPawns)))) (does random (roll (cons ?D nil))) (does ?Player (move ?MovingPawns (from ?FromAndTo) (to ?FromAndTo))) (true (cell ?FromAndTo ?OldCapture (with_pawn (of ?Player) (number ?MovingPawns)))) (rule_outcome ?Player ?D ?OldCapture nothing))
(<= (next (cell ?FromAndTo ?OldCapture free)) (does random (roll (cons ?D nil))) (does ?Player (move ?MovingPawns (from ?FromAndTo) (to ?FromAndTo))) (true (cell ?FromAndTo ?OldCapture (with_pawn (of ?Player) (number ?MovingPawns)))) (rule_outcome ?Player ?D ?OldCapture minusone))
(<= (next (cell ?To (captured_by ?Player) (with_pawn (of ?Player) (number ?MovingPawns)))) (player ?Player) (does random (roll (cons ?D nil))) (does ?Player (move ?MovingPawns (from ?From) (to ?To))) (distinct ?From ?To) (true (cell ?To ?Capture ?_3)) (rule_outcome ?Player ?D ?Capture capture))
(<= (next (cell ?To ?Capture (with_pawn (of ?Player) (number ?MovingPawns)))) (player ?Player) (does random (roll (cons ?D nil))) (does ?Player (move ?MovingPawns (from ?From) (to ?To))) (distinct ?From ?To) (true (cell ?To ?Capture ?_4)) (rule_outcome ?Player ?D ?Capture nothing))
(<= (next (cell ?To ?Capture free)) (player ?Player) (does random (roll (cons ?D nil))) (does ?Player (move ?_5 (from ?From) (to ?To))) (true (cell ?To ?Capture ?_6)) (distinct ?From ?To) (rule_outcome ?Player ?D ?Capture minusone))
(<= (next (cell ?From ?OldCapture free)) (player ?Player) (does random ?_7) (does ?Player (move ?_8 (from ?From) (to ?To))) (distinct ?From ?To) (true (cell ?From ?OldCapture ?_9)))
(<= (next (cell ?Rc ?OldCapture ?OldPawnState)) (player ?Player) (does random ?_10) (does ?Player (move ?_11 (from ?From) (to ?To))) (true (cell ?Rc ?OldCapture ?OldPawnState)) (distinct ?Rc ?From) (distinct ?Rc ?To))
(<= (next (cell ?Rc ?OldCapture ?OldPawnState)) (does ?_12 (spawn (at ?Spawn))) (true (cell ?Rc ?OldCapture ?OldPawnState)) (distinct ?Rc ?Spawn))
(<= (next (cell ?Spawn ?OldCapture (with_pawn (of ?Player) (number 1)))) (does ?Player (spawn (at ?Spawn))) (true (cell ?Spawn ?OldCapture ?_13)))
(<= (next (control ?Player)) (player ?Player) (true (control ?Player)))
(<= (next (last_roll ?D6 ?Outcome)) (rich_ui last_roll) (player ?Player) (does random (roll (cons ?D6 nil))) (does ?Player (move ?_14 (from ?_15) (to ?To))) (true (cell ?To ?Capture ?_16)) (rule_outcome ?Player ?D6 ?Capture ?Outcome))
(<= (player_score ?Player 100) (true_for_each_cell (captured_by ?Player)))
(<= (player_score ?Player 50) (true (cell ?_17 wild ?_18)) (true (cell ?_19 (captured_by ?Player) ?_20)))
(<= (player_score ?Player 0) (player ?Player) (true_for_each_cell wild))
(<= (true_for_each_cell ?Capture) (true (cell (rc 1 1) ?Capture ?_21)) (true (cell (rc 1 2) ?Capture ?_22)) (true (cell (rc 1 3) ?Capture ?_23)) (true (cell (rc 2 1) ?Capture ?_24)) (true (cell (rc 2 2) ?Capture ?_25)) (true (cell (rc 2 3) ?Capture ?_26)) (true (cell (rc 3 1) ?Capture ?_27)) (true (cell (rc 3 2) ?Capture ?_28)) (true (cell (rc 3 3) ?Capture ?_29)))
(<= (true_for_each_cell_occupation ?Occupation) (true (cell (rc 1 1) ?_30 ?Occupation)) (true (cell (rc 1 2) ?_31 ?Occupation)) (true (cell (rc 1 3) ?_32 ?Occupation)) (true (cell (rc 2 1) ?_33 ?Occupation)) (true (cell (rc 2 2) ?_34 ?Occupation)) (true (cell (rc 2 3) ?_35 ?Occupation)) (true (cell (rc 3 1) ?_36 ?Occupation)) (true (cell (rc 3 2) ?_37 ?Occupation)) (true (cell (rc 3 3) ?_38 ?Occupation)))
(<= (row ?I) (max_row ?MaxRow) (le 1 ?I) (le ?I ?MaxRow))
(<= (col ?I) (max_col ?MaxCol) (le 1 ?I) (le ?I ?MaxCol))
(<= (stack ?PossiblePawnStack) (max_stack ?MaxStack) (le 1 ?PossiblePawnStack) (le ?PossiblePawnStack ?MaxStack))
(<= (neighboring_coordinates ?A ?B) (coordinates ?A) (coordinates ?B) (neighboring_coordinates_aux ?A ?B))
(<= (neighboring_coordinates_aux (rc ?R ?C) (rc ?R ?C)) (is_number ?R) (is_number ?C))
(<= (neighboring_coordinates_aux (rc ?R ?Lc) (rc ?R ?Rc)) (is_number ?R) (s ?Lc ?Rc))
(<= (neighboring_coordinates_aux (rc ?R ?Lc) (rc ?R ?Rc)) (is_number ?R) (s ?Rc ?Lc))
(<= (neighboring_coordinates_aux (rc ?Lr ?C) (rc ?Rr ?C)) (is_number ?C) (s ?Lr ?Rr))
(<= (neighboring_coordinates_aux (rc ?Lr ?C) (rc ?Rr ?C)) (is_number ?C) (s ?Rr ?Lr))
(roll_d6 0 nil)
(<= (roll_d6 1 (cons ?R1 nil)) (d6 ?R1))
(<= (roll_d6 2 (cons ?R1 (cons ?R2 nil))) (d6 ?R1) (d6 ?R2))
(<= (roll_d6 3 (cons ?R1 (cons ?R2 (cons ?R3 nil)))) (d6 ?R1) (d6 ?R2) (d6 ?R3))
(<= (roll_d6 4 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 nil))))) (d6 ?R1) (d6 ?R2) (d6 ?R3) (d6 ?R4))
(<= (counted_dice (dice ?D6) ?X) (roll_d6 ?N ?D6) (sc ?N ?X))
(<= (head_tail_of_dice ?R1 nil (dice (cons ?R1 nil))) (roll_d6 ?_39 (cons ?R1 nil)))
(<= (head_tail_of_dice ?R1 (cons ?R2 nil) (dice (cons ?R1 (cons ?R2 nil)))) (roll_d6 ?_40 (cons ?R1 (cons ?R2 nil))))
(<= (head_tail_of_dice ?R1 (cons ?R2 (cons ?R3 nil)) (dice (cons ?R1 (cons ?R2 (cons ?R3 nil))))) (roll_d6 ?_41 (cons ?R1 (cons ?R2 (cons ?R3 nil)))))
(<= (head_tail_of_dice ?R1 (cons ?R2 (cons ?R3 (cons ?R4 nil))) (dice (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 nil)))))) (roll_d6 ?_42 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 nil))))))
(<= (nth_element_d6 1 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R1) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(<= (nth_element_d6 2 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R2) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(<= (nth_element_d6 3 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R3) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(<= (nth_element_d6 4 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R4) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(<= (nth_element_d6 5 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R5) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(<= (nth_element_d6 6 (cons ?R1 (cons ?R2 (cons ?R3 (cons ?R4 (cons ?R5 (cons ?R6 nil)))))) ?R6) (outcome ?R1) (outcome ?R2) (outcome ?R3) (outcome ?R4) (outcome ?R5) (outcome ?R6))
(outcome capture)
(outcome nothing)
(outcome minusone)
(tile field)
(<= (valid_rule_0 (situation (army ?Of (count 0)) ?On)) (valid_rule (situation (army ?Of (count 0)) ?On)))
(<= (valid_rule (situation (army (of ?P) (count ?X)) (on ?Tile wild))) (valid_rule_aux ?P ?X ?Tile))
(<= (valid_rule (situation (army (of ?P) (count ?X)) (on ?Tile (owned_by ?Q)))) (valid_rule_aux ?P ?X ?Tile) (player ?Q))
(<= (valid_rule_aux ?Player ?Count ?Tile) (player ?Player) (is_succ ?Count) (tile ?Tile))
(<= (unify_situation ?A ?A) (valid_rule ?A))
(<= (unify_dice (dice ?A) (dice ?A)) (roll_d6 ?_43 ?A))
(<= (count_of_situation (situation (army ?Of (count ?X)) ?On) ?X) (valid_rule (situation (army ?Of (count ?X)) ?On)))
(<= (nrules ?S (dice nil) ?S) (valid_rule_0 ?S))
(<= (nrules ?Before ?Roll (situation (army ?ReturnArmy (count ?A)) ?ReturnOn)) (head_tail_of_dice ?D6 ?T ?Roll) (counted_dice ?Roll (succ ?N)) (count_of_situation ?Before (succ ?N)) (rules ?Before (die ?D6) (situation (army ?Of (count ?C)) ?On)) (unify_dice (dice ?T) ?DiceTail) (nrules ?Next ?DiceTail ?Return) (add ?A (succ ?N) ?Tmp) (add (succ ?R) ?C ?Tmp) (valid_rule (situation (army ?ReturnArmy (count ?A)) ?ReturnOn)) (unify_situation (situation (army ?Of (count ?N)) ?On) ?Next) (unify_situation (situation (army ?ReturnArmy (count ?R)) ?ReturnOn) ?Return))
(<= (rule_outcome ?Player ?D6 ?CaptureType ?Outcome) (rules ?Player ?CaptureType ?OutcomeList) (nth_element_d6 ?D6 ?OutcomeList ?Outcome))
(<= (player ?Player) (role ?Player) (distinct random ?Player))
(<= (valid_cell (cell ?Coordinates ?Type ?WithPawn)) (coordinates ?Coordinates) (cell_type ?Type) (valid_pawn ?WithPawn))
(<= (coordinates (rc ?Row ?Column)) (row ?Row) (col ?Column))
(cell_type wild)
(<= (cell_type (captured_by ?Player)) (player ?Player))
(valid_pawn free)
(<= (valid_pawn (with_pawn (of ?Player) (number ?Number))) (player ?Player) (stack ?Number))
(d6 1)
(d6 2)
(d6 3)
(d6 4)
(d6 5)
(d6 6)
(<= (is_number ?N) (s ?N ?_44))
(<= (is_succ ?X) (sc ?_45 ?X))
(<= (le ?A ?B) (is_number ?B) (s ?A ?X) (le ?X ?B))
(<= (le ?A ?A) (is_number ?A))
(s 0 1)
(s 1 2)
(s 2 3)
(s 3 4)
(s 4 5)
(s 5 6)
(s 6 7)
(s 7 8)
(sc 0 0)
(sc 1 (succ 0))
(sc 2 (succ (succ 0)))
(sc 3 (succ (succ (succ 0))))
(sc 4 (succ (succ (succ (succ 0)))))
(sc 5 (succ (succ (succ (succ (succ 0))))))
(sc 6 (succ (succ (succ (succ (succ (succ 0)))))))
(sc 7 (succ (succ (succ (succ (succ (succ (succ 0))))))))
(sc 8 (succ (succ (succ (succ (succ (succ (succ (succ 0)))))))))
(sc 9 (succ (succ (succ (succ (succ (succ (succ (succ (succ 0))))))))))
(sc 10 (succ (succ (succ (succ (succ (succ (succ (succ (succ (succ 0)))))))))))
(<= (uni ?A (succ ?A)) (is_succ ?A))
(<= (add 0 ?B ?B) (is_succ ?B))
(<= (add ?A ?B (succ ?C)) (uni ?Am1 ?A) (add ?Am1 ?B ?C) (is_succ ?B) (is_succ ?C))
